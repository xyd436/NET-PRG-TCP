1. 运行环境要求
操作系统： Windows。
Python版本：Python 3.11.4 
2. 配置选项
①服务器端配置：
	在服务器端程序中，需要指定监听的端口号 server_port，默认设置为 12345。可以根据需要修改该端口号。
	使用 setsockopt(SOL_SOCKET, SO_REUSEADDR, 1) 允许地址重用，确保在服务器重启后可以快速重启。
②客户端配置：
	客户端程序会提示用户输入服务器的IP地址和端口号，在运行时用户需要根据实际情况输入。
3. 程序功能说明
①服务器功能：
	程序运行后，会创建一个TCP服务器套接字 server_socket，并绑定到指定的端口 server_port 上，开始监听来自客户端的连接请求。
	使用 select 函数监听可读事件，实现了非阻塞IO，能够处理多个连接请求和数据收发。
	对于每个连接，根据收到的报文类型，可以执行初始化握手和数据反转的功能。
	如果收到类型为 1 的报文，服务器会发送类型 2 的确认报文，表示已经接受初始化请求。
	如果收到其他类型的报文，服务器会将接收到的数据反转，并发送类型 4 的反转后的数据给客户端。
②客户端功能：
	客户端程序启动后，会要求用户输入服务器的IP地址和端口号，以及发送报文的长度范围 Lmin 和 Lmax。
	读取本地文件中的文本内容作为待发送的数据。
	根据随机生成的报文长度将文本分割成多个部分，并逐个发送到服务器。
	收到服务器的反转后的数据后，按顺序将每个部分连接成完整的反转文本，并将结果写入本地文件 write.txt。
4. 使用步骤
①服务器端启动：
	在命令行或终端中运行服务器端的Python程序。
	服务器端会输出提示信息，显示服务器已启动，并开始监听连接请求。
②客户端启动：
	在命令行或终端中运行客户端的Python程序。
	按照提示输入服务器的IP地址和端口号，以及报文长度的范围。
	客户端会自动读取本地文件中的文本内容，将其分割并发送到服务器。
③交互过程：
	客户端与服务器建立连接后，会进行初始化握手，确认连接建立。
	客户端发送数据到服务器，服务器接收并处理数据，将反转后的结果返回给客户端。
	客户端接收到反转后的数据，将其按照原来的顺序拼接成完整的反转文本，并将结果保存在本地文件 write.txt 中。
④结束连接：
	客户端完成数据发送后，关闭与服务器的连接。
	服务器端在收到客户端断开连接的通知后，关闭与客户端的连接，终止程序运行。
5. 注意事项
	确保服务器端和客户端运行在网络可互通的环境中，可以通过指定IP地址和端口号进行通信。
	在运行客户端程序时，确保本地文件 read.txt 中有足够的文本内容供发送。
	可以根据实际需要修改报文长度范围 Lmin 和 Lmax，以及本地文件的内容，来测试程序在不同情况下的运行表现。